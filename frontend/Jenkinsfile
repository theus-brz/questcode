podTemplate(
  cloud: "kubernetes",
  name: "questcode",
  label: "questcode", 
  namespace: "devops", 
  containers: [
    containerTemplate(
      args: "9999999", 
      command: "sleep", 
      image: "docker", 
      name: "docker-container", 
      workingDir: "/home/jenkins/agent"
    ),
    containerTemplate(
      args: "9999999", 
      command: "sleep", 
      image: "lachlanevenson/k8s-helm:v2.11.0",
      name: "helm-container", 
      ttyEnabled: true,
      workingDir: "/home/jenkins/agent"
    ),
  ], 
  volumes: [
    hostPathVolume(
      hostPath: "/var/run/docker.sock", 
      mountPath: "/var/run/docker.sock"
    )
  ]
) {
  node("questcode") {
    def REPOS
    def IMAGE_VERSION
    def KUBE_NAMESPACE
    def IMAGE_NAME = "questcode-frontend"
    def ENVIRONMENT
    def GIT_REPOS_URL = "git@github.com:theus-brz/questcode.git"
    def GIT_BRANCH
    def HELM_CHART_NAME = "questcode/frontend"
    def HELM_DEPLOY_NAME
    def CHARTMUSEUM_URL = "http://chartmuseum-chartmuseum:8080"

    stage("Checkout") {
      echo "Iniciando clone do reposit√≥rio"
      REPOS = checkout([$class: 'GitSCM', branches: [[name: '*/main'], [name: '*/develop']], extensions: [], userRemoteConfigs: [[credentialsId: 'github', url: GIT_REPOS_URL]]]) 
      GIT_BRANCH = REPOS.GIT_BRANCH
      if (GIT_BRANCH.equals('origin/main')) {
        KUBE_NAMESPACE = 'prod'
        ENVIRONMENT = 'production'
      } else if (GIT_BRANCH.equals('origin/develop')) {
        KUBE_NAMESPACE = 'staging'
        ENVIRONMENT = 'staging'
      } else {
        def error = "Nao existe pipeline para a branch ${GIT_BRANCH}"
        echo error
        throw new Exception(error)
      }
      HELM_DEPLOY_NAME = KUBE_NAMESPACE + "-frontend"
      sh "chmod +x -R ${env.WORKSPACE}"
      IMAGE_VERSION = sh returnStdout: true, script: 'frontend/read-package-version.sh'
      IMAGE_VERSION = IMAGE_VERSION.trim()
    }
    
    stage("Package") {
      container("docker-container") {
        echo "Iniciando empacotamento com Docker"
        withCredentials([
          usernamePassword(
            credentialsId: "dockerhub", 
            passwordVariable: "DOCKER_HUB_PASSWORD", 
            usernameVariable: "DOCKER_HUB_USER"
          )
        ]) {
          sh """
            docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
            docker build -t ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_VERSION} ./frontend --build-arg NPM_ENV=${ENVIRONMENT}
            docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_VERSION}
          """
        }
      }
    }
    
    stage("Deploy") {
      container("helm-container") {
        echo "Iniciando deploy com helm"
        sh """
          helm repo add questcode ${CHARTMUSEUM_URL}
          helm repo update
        """
        try {
          sh "helm upgrade --namespace=${KUBE_NAMESPACE} ${HELM_DEPLOY_NAME} ${HELM_CHART_NAME} --set image.tag=${IMAGE_VERSION}"
        } catch (Exception e) {
          sh "helm install --namespace=${KUBE_NAMESPACE} ${HELM_DEPLOY_NAME} ${HELM_CHART_NAME} --set image.tag=${IMAGE_VERSION}"
        }
      }
    }
  }
}